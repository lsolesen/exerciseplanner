# A teacher / trainer has to be able to create programs for users
# A user can create own programs
# A user can create own exercises which in time can be reviewed by trainers
#   and added to the collective pool of exercises.
# A user can have an infinite numbers of programs
# A trainer / editor can create standard programs, which are easy to apply to 
#   a user    

# A user can have an exercise program

Profile:
  columns:
    sf_guard_user_id: integer(4)
    first_name: string(255)
    last_name: string(255)
    email_address: string(255)
    notes: string(4000)
  relations:
    User:
      class: sfGuardUser
      local: sf_guard_user_id
      onDelete: CASCADE
      foreignType: one

# A program consists of different exercises

Program:
  actAs: 
    Timestampable:
    I18n:
      fields: [ name, notes ]
  columns:
    id: { type: integer(4), unsigned: true, primary: true, autoincrement: true }
    creator_id: integer(4)    
    owner_id: integer(4)
    name: { type: string(32) }
    notes: { type: string(4000) }
    is_shareable: { type: boolean, default: true }
  relations:
    Creator:
      class: sfGuardUser
      local: creator_id
      onDelete: SET NULL
    Owner:
      class: sfGuardUser
      foreignAlias: Programs
      local: owner_id
      onDelete: CASCADE
    Tags:
      class: Tag
      foreignAlias: Programs
      local: program_id
      foreign: tag_id
      refClass: ProgramTag

# Each exercise will be related to the program through one of two:
# 1) The time you have to conduct an exercise, lets say running, or 
# 2) The number of reps you have to do in each set 

ExerciseSet:
  columns:
    id: { type: integer(4), unsigned: true, primary: true, autoincrement: true }
    exercise_id: { type: integer(4), unsigned: true }
    program_id: { type: integer(4), unsigned: true }
    s1: { type: string(32) }
    s2: { type: string(32) }
    otype: { type: integer(1), unsigned: true }
  relations:
    Exercise:
      local: exercise_id
      foreignAlias: ExerciseSets
      onDelete: CASCADE
    Program:
      foreignAlias: Sets
      local: program_id
      onDelete: CASCADE
      
RepSet:
  inheritance: { extends: ExerciseSet, keyField: otype, keyValue: 1 }

TimeSet:
  inheritance: { extends: ExerciseSet, keyField: otype, keyValue: 2 }

# An exercise can have several related exercises

Exercise:
  tableName: exercises
  actAs:
    Timestampable:
    I18n:
      fields: [ name, description, video ]
  columns:
    id: { type: integer(4), unsigned: true, primary: true, autoincrement: true }
    creator_id: integer(4)    
    owner_id: integer(4)
    name: string(30)
    description: string(4000)
    video: string(255)
    is_shareable: { type: boolean, default: false }
  relations:
    Creator:
      class: sfGuardUser
      local: creator_id
      onDelete: SET NULL
    Owner:
      class: sfGuardUser
      foreignAlias: Programs
      local: owner_id
      onDelete: CASCADE
    Exercise:
      alias: Exercises
      local: exercise_id
      foreign: related_exercise_id
      refClass: ExerciseLink
    Muscles:
      class: Muscle
      local: exercise_id
      foreign: muscle_id
      refClass: ExerciseMuscle
    Tags:
      class: Tag
      local: exercise_id
      foreign: tag_id
      refClass: ExerciseTag
              
# Exercise relation tables
ExerciseMuscle:
  tableName: exercise_muscles
  columns:
    id: { type: integer(4), unsigned: true, primary: true, autoincrement: true }
    exercise_id: { type: integer(4), unsigned: true }
    muscle_id: { type: integer(4), unsigned: true }

ExerciseLink:
  tableName: exercise_links
  columns:
    id: { type: integer(4), unsigned: true, primary: true, autoincrement: true }
    exercise_id: { type: integer(4), unsigned: true }
    related_exercise_id: { type: integer(4), unsigned: true }
  relations:
    Exercise:
      onDelete: CASCADE

###############################################
Muscle:
  actAs:
    I18n:
      fields: [ name, insertion, origin ]
  tableName: muscles
  columns:
    id: { type: integer(4), unsigned: true, primary: true, autoincrement: true }
    name: string(255)
    insertion: string(255) # muscle point attached to the bone which moves
    origin: string(255) # muscle point attached to the bone which is stationary
    image: string(128)
    image_width: { type: integer(4), unsigned: true }
    image_height: { type: integer(4), unsigned: true }

################################################
#Image:
#  attributes:
#    export: [ all, constraints ]
#  tableName: images
#  columns:
#    id:       { type: integer(4), unsigned: true, primary: true, autoincrement: true }
#    owner_id: { type: integer(4), unsigned: true }
#    filename: { type: string(128) }
#    width:    { type: integer(3), unsigned: true }
#    height:   { type: integer(3), unsigned: true }
#    caption:  { type: string(128) }
#    otype:    { type: integer(1), unsigned: true }  

ExerciseImage:
  actAs: 
    I18n:
      fields: [ caption ]
  tableName: exercise_images
  columns:
    id:       { type: integer(4), unsigned: true, primary: true, autoincrement: true }
    exercise_id: { type: integer(4), unsigned: true }
    filename: { type: string(128) }
    width:    { type: integer(3), unsigned: true }
    height:   { type: integer(3), unsigned: true }
    caption:  { type: string(128) }
  relations:
    Exercise:
      local: exercise_id
      foreignAlias: Images
      onDelete: CASCADE

Tag:
  actAs:
    Timestampable:
    I18n:
      fields: [ name ]
  columns:
    id:   { type: integer(4), unsigned: true, primary: true, autoincrement: true }
    name: { type: string(64) }

ExerciseTag:
  columns:
    id:          { type: integer(4), unsigned: true, primary: true, autoincrement: true }
    tag_id:      { type: integer(4), unsigned: true }
    exercise_id: { type: integer(4), unsigned: true }
  relations:
    Exercise:
      onDelete: CASCADE
    Tag:
      onDelete: CASCADE

ProgramTag:
  columns:
    id:          { type: integer(4), unsigned: true, primary: true, autoincrement: true }
    tag_id:      { type: integer(4), unsigned: true }
    program_id:  { type: integer(4), unsigned: true }
  relations:
    Program:
      onDelete: CASCADE
    Tag:
      onDelete: CASCADE

# LATER ADDITIONS:

# A user can have a log and a calendar and follow own training
# A trainer can follow students training 
